<sect1 id="featureset">
 <title>What does Regina do?</title>

 <para>
  A list of &regina;'s more noteworthy features is presented below.
 </para>

 <sect2 id="features-tri">
  <title>Triangulations</title>

  <para>
   The primary objects that a user works with in &regina; are
   3-manifold triangulations.  As such, a large part of
   the software is devoted to the creation, analysis and manipulation of
   these triangulations.
  </para>

  <sect3 id="features-tricreation">
   <title>Creation</title>

   <para>
    You can create 3-manifold triangulations in the following ways:
    <itemizedlist>
     <listitem><para>
      manual construction by entering
      individual tetrahedron face gluings by hand;
     </para></listitem>
     <listitem><para>
      automatic generation of several standard families of triangulations,
      such as layered solid tori and layered lens spaces
      <xref linkend="bib-0-efficiency"/>,
      <xref linkend="bib-layeredlensspaces"/>,
      and standard constructions of &sfslong;s over the sphere;
     </para></listitem>
     <listitem><para>
      reconstruction from
      text-based isomorphism signatures
      <xref linkend="bib-burton-pachner-orprime"/>
      and Callahan-Hildebrand-Weeks
      dehydration strings <xref linkend="bib-cuspedcensus"/>;
     </para></listitem>
     <listitem><para>
      importing triangulations from &snappeapylink; and &orburl;;
     </para></listitem>
     <listitem><para>
      automatic construction of several ready-made example triangulations.
     </para></listitem>
     </itemizedlist>
    </para>
   </sect3>

  <sect3 id="features-trianalysis">
   <title>Analysis</title>
   <para>
    You can compute the following properties of a 3-manifold triangulation:
    <itemizedlist>
     <listitem><para>
      detailed combinatorial information about the skeleton and
      boundary components, including vertex links
      and the shapes formed by the various triangulation faces;
     </para></listitem>
     <listitem><para>
      a variety of homology and homotopy groups;
     </para></listitem>
     <listitem><para>
      the quantum invariants of Turaev and Viro
      <xref linkend="bib-turaevviro"/>;
     </para></listitem>
     <listitem><para>
      the Kawauchi-Kojima invariants of the torsion linking form
      <xref linkend="bib-kktorsionlinkingform"/>, and comments on
      where the triangulation might be embeddable;
     </para></listitem>
     <listitem><para>
      3-sphere, 3-ball, solid torus and unknot recognition,
      as well as a full connected sum
      decomposition for closed orientable triangulations;
     </para></listitem>
     <listitem><para>
      triangulation attributes relating to the existence of particular
      types of normal surface, such as 0-efficiency <xref
      linkend="bib-0-efficiency"/>
      and the existence of splitting surfaces
      (described <link linkend="features-splitting">below</link>);
     </para></listitem>
     <listitem><para>
      geometric properties, courtesy of the &snappea; kernel;
     </para></listitem>
     <listitem><para>
      a visual representation of the face pairing graph
      <xref linkend="bib-burton-facegraphs"/>, with the help
      of &graphviz;;
     </para></listitem>
     <listitem><para>
      text-based isomorphism signatures
      <xref linkend="bib-burton-pachner-orprime"/>,
      which identify a triangulation uniquely up to combinatorial isomorphism;
     </para></listitem>
     <listitem><para>
      Callahan-Hildebrand-Weeks dehydration strings
      <xref linkend="bib-cuspedcensus"/>,
      for those triangulations that can support them.
     </para></listitem>
    </itemizedlist>
   </para>

   <para>
    Pairs of triangulations can be tested for direct isomorphism, or for
    whether one triangulation is isomorphic to a subcomplex of another.  In
    addition the software can recognise and identify a large variety of
    well-formed structures within a
    triangulation.  These include common building blocks (such as the
    layered solid tori mentioned above) as well as infinite families
    of complete triangulations such as those described by
    Burton <xref linkend="bib-burton-phd"/>, <xref linkend="bib-burton-nor7"/>,
    <xref linkend="bib-burton-satblocks"/>,
    Martelli and Petronio <xref linkend="bib-italian9"/> and
    Matveev <xref linkend="bib-matveev6"/>.  As a
    result, &regina; can frequently recognise the underlying 3-manifolds for
    well-structured triangulations that it has not previously encountered.
   </para>
  </sect3>

  <sect3 id="features-trimanipulation">
   <title>Manipulation</title>

   <para>
    You can manipulate a 3-manifold triangulation using the following tools:
    <itemizedlist>
     <listitem><para>
      elementary moves (transformations local to a small
      number of tetrahedra), such as Pachner moves and other
      transformations described in <xref linkend="bib-burton-nor7"/>,
      many of which were suggested by Letscher;
     </para></listitem>
     <listitem><para>
      automated simplification in which the software attempts to use
      a combination of these elementary moves to reduce the number of
      tetrahedra as far as possible, though there is no
      guarantee that the smallest possible number of tetrahedra will be
      achieved;
     </para></listitem>
     <listitem><para>
      conversion to a 0-efficient triangulation where possible
      for closed orientable 3-manifolds <xref linkend="bib-0-efficiency"/>;
     </para></listitem>
     <listitem><para>
      barycentric subdivision and the truncation of ideal vertices
      (vertices whose links are neither 2-spheres nor discs);
     </para></listitem>
     <listitem><para>
      extension of the boundary to convert real boundary components into
      ideal vertices;
     </para></listitem>
     <listitem><para>
      conversion of a non-orientable triangulation to an orientable
      double cover;
     </para></listitem>
     <listitem><para>
      cutting along normal surfaces within a triangulation
      or crushing them to a point, as
      described <link linkend="features-surfaces">below</link>.
     </para></listitem>
    </itemizedlist>
   </para>
  </sect3>
 </sect2>

 <sect2 id="features-census">
  <title>Census Creation</title>
  <para>
   &regina; can be used to form a census of all 3-manifold triangulations
   satisfying a particular set of census constraints.
   The command-line tool
   <link linkend="man-tricensus"><command>tricensus</command></link>
   is particularly well suited for this task.
  </para>
  <para>
   The census algorithm is heavily optimised; see
   <xref linkend="bib-burton-facegraphs"/>,
   <xref linkend="bib-burton-nor10"/> and
   <xref linkend="bib-burton-genus"/> for details.
   There is also an &mpi; version that
   can be distributed across a large number of machines for
   use on high-performance clusters.
  </para>
  <para>
   &regina; ships with a number of
   prepackaged censuses, including closed 3-manifold triangulations
   <xref linkend="bib-burton-nor8"/>, <xref linkend="bib-burton-nor10"/>,
   <xref linkend="bib-burton-genus"/>, hyperbolic 3-manifolds
   <xref linkend="bib-cuspedcensus"/>, <xref linkend="bib-closedhypcensus"/>,
   and knot and link complements (tabulated by Joe Christy).
   A census lookup facility for arbitrary triangulations is provided.
  </para>
 </sect2>

 <sect2 id="features-surfaces">
  <title>Normal Surfaces</title>
  <para>
   &regina; is capable of enumerating all vertex or fundamental
   normal surfaces within a triangulation; almost normal
   surfaces<footnote><para>Almost normal surfaces are closely related
     to normal surfaces and are used by Rubinstein in his 3-sphere recognition
     algorithm <xref linkend="bib-rubin-3sphere1"/>,
     <xref linkend="bib-rubin-3sphere2"/>.  &regina; only considers octagonal
     almost normal discs, and does not consider annular
     pieces.</para></footnote>
   are supported also.
   These operations are required by many high-level topological algorithms that
   utilise normal surface theory.  The underlying enumeration algorithms
   are highly optimised, and are described in detail in
   <xref linkend="bib-burton-dd"/>,
   <xref linkend="bib-burton-convert"/>,
   <xref linkend="bib-burton-quadoct"/> and
   <xref linkend="bib-burton-fund"/>.
  </para>
  <para>
   This enumeration can be performed in a variety of coordinate
   systems.  For an <replaceable>n</replaceable>-tetrahedron triangulation
   this includes the 7<replaceable>n</replaceable>
   standard triangle and quadrilateral coordinates, as well
   as the smaller set of 3<replaceable>n</replaceable> quadrilateral-only
   coordinates <xref linkend="bib-quadspace"/>.
   Likewise, for almost normal surfaces
   this includes the 10<replaceable>n</replaceable> standard coordinates
   as well as the 6<replaceable>n</replaceable> quadrilateral-octagon
   coordinates <xref linkend="bib-burton-quadoct"/>.
   &regina; also offers experimental support for
   transversely oriented normal surfaces <xref linkend="bib-cooper-tons"/>.
  </para>
  <para>
   The enumeration
   can be restricted to embedded normal surfaces or can be expanded to
   include immersed and singular surfaces.  &regina; also supports
   spun-normal surfaces <xref linkend="bib-tillus-spun"/>,
   which are non-compact surfaces with infinitely many
   discs found in ideal triangulations.
  </para>
  <para>
   To analyse normal surfaces, you can:
   <itemizedlist>
    <listitem><para>
     view normal surfaces in a variety of coordinate systems,
     including the standard and quadrilateral-only coordinates
     discussed above as well as the edge weight coordinates introduced by
     Casson;
    </para></listitem>
    <listitem><para>
     calculate basic properties of normal surfaces such as
     Euler characteristic, orientability and one-sidedness;
    </para></listitem>
    <listitem><para>
     test surfaces for incompressibility, using both exact techniques
     <xref linkend="bib-jaco-oertel"/> and
     fast heuristics <xref linkend="bib-weber-seifert"/>;
    </para></listitem>
    <listitem><para>
     cut along a normal surface and retriangulate, or crush the surface
     using the techniques of Jaco and Rubinstein
     <xref linkend="bib-0-efficiency"/>;
    </para></listitem>
    <listitem><para>
     recognise standard surfaces within a triangulation such
     as splitting surfaces (described
     <link linkend="features-splitting">below</link>)
     and vertex and edge links;
    </para></listitem>
    <listitem><para>
     test pairs of surfaces for local compatibility (compatible
     quadrilaterals and/or octagons) and global compatibility (being
     able to make the surfaces disjoint);
    </para></listitem>
    <listitem><para>
     filter large lists of normal surfaces by various properties
     such as Euler characteristic, orientability and boundary.
    </para></listitem>
   </itemizedlist>
  </para>
 </sect2>

 <sect2 id="features-angles">
  <title>Angle Structures</title>
  <para>
   Angle structures, studied originally by Casson and then developed by
   Lackenby <xref linkend="bib-lackenby-taut"/>,
   <xref linkend="bib-lackenby-anglestruct"/> and
   Rivin <xref linkend="bib-rivin-structures"/>,
   <xref linkend="bib-rivin-combopt"/>,
   represent a purely
   algebraic generalisation of hyperbolic structures.  An angle structure
   on an ideal triangulation is formed by assigning an interior
   dihedral angle to each edge of every tetrahedron in such a way that
   a variety of linear equations and inequalities are satisfied.
  </para>
  <para>
   Using similar techniques to normal surface enumeration
   &regina; can enumerate all vertex angle structures in a triangulation,
   or all taut structures (for which each dihedral angle is precisely 0
   or &pi;).
   &regina; can also identify veering structures, which are taut
   structures that induce a specific type of combinatorial structure on
   the underlying triangulation
   <xref linkend="bib-agol-ideal"/>, <xref linkend="bib-hodgson-veering"/>.
  </para>
 </sect2>

 <sect2 id="features-splitting">
  <title>Splitting Surfaces</title>
  <para>
   A splitting surface contains precisely one quadrilateral disc within
   each tetrahedron and no other normal or almost normal discs.
   These surfaces have some interesting combinatorial and topological
   properties, described in detail in <xref linkend="bib-burton-phd"/>.
  </para>
  <para>
   &regina; can detect whether splitting surfaces
   occur within a triangulation.  It also provides support for
   splitting surface signatures, which are compact text-based representations
   from which splitting surfaces and their enclosing 3-manifold
   triangulations can be reconstructed.  In addition, &regina; can generate a
   census of all possible splitting surface signatures of a given size.
  </para>
 </sect2>

 <sect2 id="features-scripting">
  <title>Scripting</title>
  <para>
   Users can interact with &regina; at a lower level by writing and
   running scripts in <ulink url="http://www.python.org/">&python;</ulink>.
   These scripts are essentially high-level programs with immediate access
   to the mathematical core of &regina;, and are ideal for
   performing repetitive tasks over large sets of data.  Such tasks might
   include performing a sequence of tests upon all triangulations in a
   census, or testing a prototype for a new algorithm.
   Scripts can be embedded in &regina; data files or run from the
   command line, and custom libraries of
   routines can be written to share code between files.
  </para>
 </sect2>

 <sect2 id="features-interfaces">
  <title>Interfaces</title>
  <para>
   The usual method of running &regina; is through a full
   point-and-click graphical user interface.
   Alternatively, for those requiring immediate access to the
   mathematical core of the software, an interactive command-line interface
   is available for users to control the program using
   &python; scripting as described above.
   Various other specialised command-line utility programs are also available.
  </para>
  <para>
   The mathematical core of &regina; is provided as a &cpp; library,
   which means that programmers are able to access its low-level mathematical
   routines directly from within their own code.
  </para>
 </sect2>

 <sect2 id="features-docs">
  <title>Documentation</title>
  <para>
   Significant effort has been spent on documentation for this software.
   A full users' handbook is available for &regina; (which you are reading now).
   In addition, the graphical user interface offers extensive assistance
   through tooltips and &quot;What's This?&quot; texts.  Just hit
   <keycombo action="simul">&Shift;<keycap>F1</keycap></keycombo>
   and click on any element of the user interface for immediate assistance.
  </para>
  <para>
   For users writing &python; scripts or for &cpp; programmers seeking to
   modify or extend the software, the full &api; for &regina;'s
   mathematical engine is also extensively documented.
   You can access the &api; documentation by selecting
   <menuchoice>
    <guimenu>Help</guimenu>
    <guimenuitem>Python API Reference</guimenuitem>
   </menuchoice>.
  </para>
 </sect2>

 <sect2 id="features-datafiles">
  <title>Data Files</title>
  <para>
   &regina; stores data in a well-organised hierarchical structure,
   allowing a single data file to contain
   multiple triangulations, normal surface lists and other topological
   structures, along with supporting data such as text notes,
   &python; scripts and &pdf; documents.
   The file format is based on
   compressed &xml;, an open and widely-supported text-based data
   format.  International characters are fully supported.
  </para>
  <para id="dataformat">
   Again, this &xml; file format is extensively documented.
   For details, select
   <menuchoice>
    <guimenu>Help</guimenu>
    <guimenuitem>File Format Reference</guimenuitem>
   </menuchoice>.
  </para>
 </sect2>
</sect1>
