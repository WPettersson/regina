<chapter id="python">
 <title>&python; Scripting</title>

 <para>
  &regina; contains inbuilt scripting, which offers you fine control
  over &regina;'s mathematical engine and enables you to automate
  large amounts of processing.
  You can write and run scripts from
  directly within &regina;, or you can use the separate command-line tool
  <link linkend="man-regina-python"><command>regina-python</command></link>.
 </para>
 <para>
  The user interface will stay in sync with any changes that you
  make through a script, which means you can happily modify a
  data file via scripts while you have it open.
 </para>
 <para>
  All scripts in &regina; use the &python; programming language
  (<ulink url="http://www.python.org/"/>).
 </para>

 <sect1 id="python-starting">
  <title>Starting a &python; Session</title>
  <para>
   There are several ways of starting a &python; session to work with
   &regina;:
  </para>

  <sect2 id="python-gui">
   <title>Graphical &python; Consoles</title>
   <para>
    You can open a graphical &python; console by selecting
    <menuchoice>
     <guimenu>Tools</guimenu>
     <guimenuitem>Python Console</guimenuitem>
    </menuchoice>
    from the menu (or by pressing the corresponding toolbar button).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="menu-python.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A new console window will open as illustrated below,
    with an input area down the bottom (see the red arrow) and a
    full history of the session in the main part of the window.
    You can save this history by selecting
    <menuchoice>
     <guimenu>Console</guimenu>
     <guimenuitem>Save Session</guimenuitem>
    </menuchoice>.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="python-console.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    When you start the &python; session, &regina; will set some special
    variables for you:
    <glosslist>
     <glossentry>
      <glossterm><varname>root</varname></glossterm>
      <glossdef><para>
       The variable <varname>root</varname> will refer to the packet
       at the top of your packet tree.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><varname>item</varname></glossterm>
      <glossdef>
       <para>
        If you have a packet selected in the tree when you start the
        &python; session,
        the variable <varname>item</varname> will refer to this packet
        (see the figure above for an example of this).
       </para>
       <para>
        Note that, if you later change your selection in the packet tree,
        the <varname>item</varname> variable will not change as a result.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    You are welcome to use these variables to change
    packets in your data file (or even add, remove or rename packets):
    the graphical user interface will always stay in sync with any changes
    that you make via &python;.
   </para>
  </sect2>
  <sect2 id="python-cmdline">
   <title>Command-Line Sessions</title>
   <para>
    You can run the command-line program
    <link linkend="man-regina-python"><command>regina-python</command></link>
    without a graphical user interface at all.
    This will use the standard &python; interpreter.
    Since this is a text-based interface, you can also redirect
    input and output in the usual way (using &lt; and &gt; in your
    command shell).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="regina-python.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    &macosx; users will find <command>regina-python</command>
    inside &regina;'s application bundle.  See the
    <link linkend="trouble-regina-python"><acronym>FAQ</acronym> entry</link>
    for details.
   </para>
   <para>
    &windows; users do not have the command-line
    <command>regina-python</command> at all, though they can still use
    <link linkend="python-gui">graphical &python; consoles</link> and
    <link linkend="python-script">script packets</link>.
   </para>
  </sect2>
  <sect2 id="python-script">
   <title>Script Packets</title>
   <para>
    You can create a new <link linkend="packet-script">script
    packet</link> in your data file.  Script packets allow you to save
    &python; scripts along with your data, and they give your scripts
    easy access to the packets inside your file.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="menu-newscript.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    When you open a script packet, you will see your &python; code in the lower
    part of the script editor, and a table of variables up the top.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="script-edit.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    You can add your own variables to this table, and set them to arbitrary
    packets within your data file.  &regina; will always set these variables
    to the corresponding packets before running your script.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="script-var.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    At the top of the script editor you will find buttons to compile
    and run your script.
    Compiling is optional: it merely gives you a chance to spot
    syntax errors as you go.
    When you press <guibutton>Run</guibutton>, &regina; will run your
    script in a new graphical &python; console.
    The console will be left open in case you wish to experiment further.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="script-run.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Again, you are welcome to change packets in your data file via
    scripts (or even add, remove or rename packets):
    the graphical user interface will always stay in sync with any changes
    that your scripts make.
   </para>
  </sect2>
 </sect1>

 <sect1 id="python-access">
  <title>Accessing &regina; from &python;</title>
  <para>
   All of &regina;'s objects, classes and methods belong to the
   module called <parameter>regina</parameter>.
   For instance, the main 3-manifold triangulation class is
   <literal>regina.NTriangulation</literal>, and the main routine to
   read a data file is <literal>regina.readFileMagic</literal>.
  </para>
  <para>
   Whenever &regina; gives you access to &python; (either through a
   <link linkend="python-gui">graphical console</link>,
   a <link linkend="python-script">script packet</link> or a
   <link linkend="python-cmdline">command-line session</link>),
   it will automatically import the <parameter>regina</parameter>
   module (i.e., &ldquo;<literal>import regina</literal>&rdquo;),
   and it will import all of &regina;'s objects,
   classes and methods into the current namespace
   (i.e., &ldquo;<literal>from regina import&nbsp;*</literal>&rdquo;).
  </para>
  <para>
   This means, for instance, that you create a new triangulation by just
   calling <literal>NTriangulation()</literal>, and you can read a data file
   by calling <literal>readFileMagic(filename)</literal>.
   For command-line sessions, if you wish to avoid the heavy-handed
   &ldquo;<literal>from regina import&nbsp;*</literal>&rdquo;, you can pass
   the option <option>--noautoimport</option> (in which case you will need to
   use fully qualified names such as
   <literal>regina.NTriangulation()</literal> and
   <literal>regina.readFileMagic(filename)</literal>).
  </para>
  <tip>
   <para>
    If you have code that you find yourself writing again and again,
    you can put it in a <firstterm>user library</firstterm>.
    &regina; will run all of the code in all of your user libraries
    at the beginning of every &python; session
    (including graphical consoles, script packets
    and <command>regina-python</command>).
   </para>
   <para>
    User libraries are just ordinary &python; files: you can maintain
    the current list of enabled libraries through
    &regina;'s <link linkend="python-libraries">&python; options</link>.
    On &linux; and &macosx;, if you prefer, you can also maintain this
    list directly by editing the text file &regina-libs;,
    as described in the
    <link linkend="man-regina-python"><command>regina-python</command></link>
    reference.
   </para>
  </tip>

  <sect2 id="python-docs">
   <title>Documentation</title>
   <para>
    &regina; includes a complete &api; reference for its calculation engine,
    which describes in detail the objects, classes and methods that
    it makes available through &python;.  To read this documentation, select
    <menuchoice>
     <guimenu>Help</guimenu>
     <guimenuitem>Python &api; Reference</guimenuitem>
    </menuchoice>
    from the menu.  The &api; reference should open in your web browser
    (where you can bookmark it if you like).
    You can also read it online at &regenginedocsurlbase;.
   </para>
  </sect2>
 </sect1>

 <sect1 id="python-caveats">
  <title>Caveats and Traps</title>

  <para>
   &python; scripting gives you direct access to &regina;'s
   mathematical core, and as such requires some care.
   Probably the easiest way to crash &regina; is to bring up
   a &python; console and do something untoward (like gluing together
   two tetrahedra that belong to different triangulations).
   Please tread gently.
  </para>
  <para>
   In particular, you should note the following issues:
  </para>
  <sect2>
   <title>Uneditable Packets</title>
   <para>
    If you cannot edit a packet within &regina;, there is generally
    a reason for this.  For instance, a normal surface list needs its
    parent triangulation to remain fixed, which means that any
    triangulation with normal surface lists beneath it
    will be <link linkend="packet-uneditable">uneditable</link>.
   </para>
   <para>
    You should not use &python; as a way to get around this barrier.
    Instead you can work around the problem by
    <link linkend="packet-clone">cloning the packet</link>
    and editing the clone instead.
   </para>
  </sect2>

  <sect2 id="python-i18n">
   <title>International and Special Characters</title>
   <para>
    If you use special characters (such as accented letters,
    other international characters, exotic punctuation, mathematical
    symbols and so on), you need to think about
    <emphasis>text encodings</emphasis> when passing strings between
    &python; and &regina;.
   </para>
   <para>
    If you only ever deal with plain &ascii; text (plain English
    letters, digits and basic punctuation), you do not need to
    worry about text encodings at all (and you can stop reading this section).
   </para>
   <para>
    &regina; uses &utf8; throughout for special characters.  If you ever
    pass a string into one of &regina;'s functions, any special
    characters must be encoded in &utf8;; conversely, when a string is
    returned from a function you should assume that any special
    characters are encoded in &utf8;.
   </para>
   <para>
    &python;, on the other hand, does not use &utf8; strings by default.
    See the
    <ulink url="http://docs.python.org/howto/unicode.html">&python;
    &utf8; HOWTO</ulink> for more information on how to work with
    &utf8; strings in &python;.
   </para>
   <para>
    As a single exception: for file <emphasis>names</emphasis>,
    &regina; uses whatever encoding the operating system expects.
    Any files names that you pass to &regina; will be sent
    through to low-level &ccpp; I/O routines without any changes or
    re-encoding.
   </para>
  </sect2>

  <sect2 id="python-ownership">
   <title>Ownership Issues and
    <exceptionname>Boost.Python.ArgumentError</exceptionname> /
    <exceptionname>TypeError</exceptionname></title>

   <para>
    If you create a packet in &python;, it is &ldquo;owned&rdquo; by the
    &python; interpreter, which means it will be destroyed when the &python;
    interpreter closes.  However, if you insert this packet into the
    tree using <function>NPacket.insertChildLast()</function>,
    then the packet
    becomes <emphasis>owned by the tree</emphasis>.  This means it
    becomes part of your data file, and will survive even after you close
    your &python; console.
   </para>
   <para>
    Whenever the &python; interpreter <emphasis>loses ownership</emphasis>
    of an object like this, the variable representing that object
    becomes invalid.  Any attempt to access the variable will result in
    an ugly &python; error: depending on your system, this is typically a
    <exceptionname>Boost.Python.ArgumentError</exceptionname> or a
    <exceptionname>TypeError</exceptionname>.
   </para>
   <programlisting>
&gt;&gt;&gt; p = NTriangulation()
&gt;&gt;&gt; print p
Triangulation with 0 tetrahedra.
&gt;&gt;&gt; root.insertChildLast(p)
&gt;&gt;&gt; print p
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
Boost.Python.ArgumentError: Python argument types in
    ShareableObject.__str__(NTriangulation)
did not match C++ signature:
    __str__(regina::ShareableObject {lvalue})
...
</programlisting>
   <para>
    The error is easily fixed: just re-fetch the packet from its new
    owner (the packet tree):
   </para>
   <programlisting>
...
&lt;&lt;&lt; p = root.getLastTreeChild()
&lt;&lt;&lt; print p
Triangulation with 0 tetrahedra.
</programlisting>
   <para>
    This is a general pattern: whenever &python; loses ownership of an
    object, the corresponding variable will become invalid, and you will
    have to re-fetch it if you want to keep working with it.
    In practice this only happens with the tree insertion routines
    <function>NPacket.insertChildFirst()</function>,
    <function>NPacket.insertChildLast()</function> and
    <function>NPacket.insertChildAfter()</function>, as well as one or
    two other routines
    (such as <function>NGroupPresentation.addRelation()</function>).
   </para>
   <para>
    The example above generated a
    <exceptionname>Boost.Python.ArgumentError</exceptionname>.
    Some systems will generate a <exceptionname>TypeError</exceptionname>
    instead, as illustrated below.
   </para>
   <programlisting>
&gt;&gt;&gt; p = NTriangulation()
&gt;&gt;&gt; print p
Triangulation with 0 tetrahedra.
&gt;&gt;&gt; root.insertChildLast(p)
&gt;&gt;&gt; print p

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: bad argument type for built-in operation
</programlisting>
  <tip>
   <para>
    If you are moving a packet around in the tree, do not call
    <function>makeOrphan()</function> followed by an insertion routine
    like <function>insertChildFirst()</function>.  This will
    trigger this ownership issue, since <function>makeOrphan()</function>
    passes ownership of the packet to &python; and then
    <function>insertChildFirst()</function> takes it away again.
    Instead use the single routine <function>NPacket.reparent()</function>,
    which avoids this problem since &python; will never own the packet at all.
   </para>
  </tip>
  </sect2>
 </sect1>

 <sect1 id="sessions">
  <title>Sample &python; Sessions</title>
  <para>
   Several sample &python; sessions are reproduced below.
   Each session was started by running
   <userinput>regina-python</userinput>
   from the command line.
  </para>

  <sect2 id="sessiontriangulation">
   <title>Working with a triangulation</title>
   <programlisting>&sessiontriangulation;</programlisting>
  </sect2>

  <sect2 id="sessiontree">
   <title>Working with a packet tree</title>
   <programlisting>&sessiontree;</programlisting>
  </sect2>

  <sect2 id="sessionprogress">
   <title>Reporting progress of long operations</title>
   <programlisting>&sessionprogress;</programlisting>
  </sect2>
 </sect1>
</chapter>
